package runElevator
//Module for running the individual elevators
//Maybe find a better name?
//Calculates what to do based on the status register for the individual elevator

import (
  "./Driver/Elevio"
  "./Status/status"
)

//TODO: Check if clearAtCurrentFloor actually clears the order and not only a copy

var FLOORS int
var ELEVATORS int
var BUTTONS int

type State struct {
	//behaviour   []int //change to enum-ish?
	floor       uint
  orders      [FLOORS][BUTTONS]int //[floor][btn] for all floors
	direction   status.MotorDirection
}

//var elev_state State;
//var elev_state status.State


func requestsAbove(elev_state State) {
  for floor := elev_state.floor+1; floor < FLOORS; floor++ {
    for button := 0; button < BUTTONS; button++ {
      if elev_state.orders[floor][button] {
        return 1
      }
    }
  }
  return 0
}

func requestsBelow(elev_state State) {
  for floor := 0; floor < elev_state.floor; floor++ {
    for button := 0; button < BUTTONS; button++ {
      if elev_state.orders[floor][button] {
        return 1
      }
    }
  }
  return 0
}

//Choose direction of travel
func chooseDirection(elev_state State) {
  switch elev_state.direction {
  case MD_Up:
    if requestsAbove(elev_state) {
      return MD_Up
    }
    if requestsBelow(elev_state) {
      return MD_Down
    }
    else {
      return MD_Stop
    }
  case MD_down:
  case MD_Stop:
    if requestsBelow(elev_state) {
      return MD_Down
    }
    if requestsAbove(elev_state) {
      return MD_Up
    }
    else {
      return MD_Stop
    }
  default:
    return MD_Stop
  }
}

//Called when elevator reaches new floor, returns 1 if it should stop
func shouldStop(elev_state State) {
  switch elev_state.direction {
  case MD_Down:
    return elev_state.orders[elev_state.floor][BT_HallDown] || elev_state.orders[elev_state.floor][BT_Cab] || !requestsBelow(elev_state)
  }
case MD_Up:
  return elev_state.orders[elev_state.floor][BT_HallUp] || elev_state.orders[elev_state.floor][BT_Cab] || !requestsAbove(elev_state)
}
case MD_Stop:
default:
  return 1;

//Clear order only if elevator is travelling in the right direction
func clearAtCurrentFloor(elev_state State){
    elev_state.orders[elev_state.floor][BT_Cab] = 0 //Er det call-by-reference??
    switch elev_state.direction {
    case MD_Up:
      elev_state[elev_state.floor][BT_HallUp] = 0

    }
}
